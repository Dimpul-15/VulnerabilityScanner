import nmap
import requests

def scan_network(target):
    """Scans the target network for open ports and services."""
    nm = nmap.PortScanner()
    nm.scan(target, arguments='-F -T4')

    vulnerabilities = []
    scanned_network = []

    for host in nm.all_hosts():
        scanned_network.append(f"Scanned Host: {host}")
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()
            for port in ports:
                vulnerabilities.append(
                    f"Host: {host}, Protocol: {proto}, Port: {port} - State: {nm[host][proto][port]['state']} - Service: {nm[host][proto][port]['name']}"
                )

    return scanned_network, vulnerabilities

def check_security_headers(url):
    """Checks for the presence and configuration of security headers in a website's response."""
    response = requests.get(url)

    print(f"URL: {url}")
    print("Security Headers:")

    headers = response.headers
    vulnerabilities = []

    if 'X-Frame-Options' not in headers:
        vulnerabilities.append("Missing X-Frame-Options header - High Risk")
    elif headers['X-Frame-Options'] not in ['DENY', 'SAMEORIGIN']:
        vulnerabilities.append("Weak X-Frame-Options configuration - Medium Risk")

    if 'X-XSS-Protection' not in headers or headers['X-XSS-Protection'] != '1; mode=block':
        vulnerabilities.append("Missing or misconfigured X-XSS-Protection header - Medium Risk")

    if 'Strict-Transport-Security' not in headers:
        vulnerabilities.append("Missing Strict-Transport-Security header - Medium Risk")

    return vulnerabilities

def perform_vulnerability_scan():
    """Performs a network and website vulnerability scan based on user input."""
    target_ip = input("Enter the target IP address to scan: ")
    website_url = input("Enter the website URL to scan: ")

    scanned_network, network_vulnerabilities = scan_network(target_ip)

    print("\nScanned Network:")
    for scanned_host in scanned_network:
        print(scanned_host)

    if not network_vulnerabilities:
        print("No vulnerabilities found in the network.")
    else:
        print("Vulnerabilities found in the network:")
        for vulnerability in network_vulnerabilities:
            print(vulnerability)

    print("\nScanning Website:")
    website_vulnerabilities = check_security_headers(website_url)
    if not website_vulnerabilities:
        print("No vulnerabilities found on the website.")
    else:
        print("Vulnerabilities found on the website:")
        for vulnerability in website_vulnerabilities:
            print(vulnerability)

if __name__ == "__main__":
    perform_vulnerability_scan()
